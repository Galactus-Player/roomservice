/*
 * roomservice
 *
 * An implementation of joinable rooms
 *
 * API version: 0.0.1
 * Contact: decline@umass.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package galactuslib

import (
	"errors"
	"fmt"
	"math/rand"
	"time"
)

// RoomApiService is a service that implents the logic for the RoomApiServicer
// This service should implement the business logic for every endpoint for the RoomApi API.
// Include any external packages or services that will be required by this service.
type RoomApiService struct {
	// rooms is a mapping from the room id to the actual Room object
	rooms           *map[string]Room
	seededGenerator *rand.Rand
}

const defaultSeed int64 = 42
const maxCode int64 = 9999

// NewRoomApiService creates a default api service
func NewRoomApiService(mapReference *map[string]Room) RoomApiServicer {
	return &RoomApiService{
		rooms:           mapReference,
		seededGenerator: rand.New(rand.NewSource(defaultSeed)),
	}
}

// AddRoom - Create a new room
func (s *RoomApiService) AddRoom() (interface{}, error) {
	// get the room using the map
	if s.rooms == nil {
		return nil, errors.New("map reference is nil, there is something wrong with initialization")
	}
	roomMap := *s.rooms
	roomNum := s.seededGenerator.Int63n(maxCode + 1)
	roomCode := fmt.Sprintf("%04d", roomNum)

	// make sure we create a new room
	for _, ok := roomMap[roomCode]; ok; _, ok = roomMap[roomCode] {
		roomNum = s.seededGenerator.Int63n(maxCode + 1)
		roomCode = fmt.Sprintf("%04d", roomNum)
	}

	roomMap[roomCode] = Room{
		Id:        roomNum,
		Code:      roomCode,
		CreatedAt: time.Now(),
	}

	return roomMap[roomCode], nil
}
